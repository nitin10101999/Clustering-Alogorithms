# -*- coding: utf-8 -*-
"""DB_Scan.ipynb

Automatically generated by Colaboratory.

Original file is located at
		https://colab.research.google.com/drive/1CAjmQE-lFOOPnXfUkFmaS3Ofo0HqIFeR
"""

#import os
#os.chdir('/content/drive/My Drive/Code/Ass2Data')
	
import numpy as np
import pandas as pd
import copy 
import math
import csv
import time
import operator
import matplotlib.pyplot as plt

# Default value
SSE = 0 
phi = -1
df = None

def findSample(index):
	lst = df.loc[index]
	lst = lst.to_numpy().tolist()
	lst = lst[:len(lst)-1]
	return lst

def PointsIn_r_Radius(x,epsilon):
	x_sample = findSample(x)
	pointsIn_r = []
	for xi in range(len(df)):
		xi_sample = findSample(xi)
		dist = math.sqrt(sum([(a-b) ** 2 for a,b in zip(xi_sample, x_sample)]))
		if dist<= epsilon:
			pointsIn_r.append(xi)

	return pointsIn_r

def DensityConnected(x,k,clusterId,cores,epsilon,hasBeenCenter):
	points = PointsIn_r_Radius(x,epsilon)
	#print(points)
	for point in points:
		if clusterId[point] == k:#hasBeenCenter[point] == 1:
			continue
		clusterId[point] = k
		if point in cores:
			hasBeenCenter[point] = 1
			DensityConnected(point,k,clusterId,cores,epsilon,hasBeenCenter)

def findCategories(clusters,labels):
	confMatrix = np.zeros((len(clusters),len(labels)))
	row = 0
	print(clusters)
	mis_classifications = 0
	for cluster in clusters:
		for item in clusters[cluster]:
			label = df.at[item,'label']
			confMatrix[row][labels[label]] += 1
		index, value = max(enumerate(confMatrix[row]), key=operator.itemgetter(1))
		mis_classifications += sum(confMatrix[row]) - value
		row += 1
	return mis_classifications

def DB_Scan(epsilon,minpoints):
	cores = set()
	clusterId = {}
	hasBeenCenter = [0]*(len(df))
	for xi in range(len(df)):
		N_points = PointsIn_r_Radius(xi,epsilon)	
		clusterId[xi] = phi
		if len(N_points) >= minpoints:
			cores.add(xi)
	
	k = 0
	for xi in cores: 
		if clusterId[xi] != phi:
			continue
		k = k + 1
		clusterId[xi] = k
		hasBeenCenter[xi] = 1
		DensityConnected(xi,k,clusterId,cores,epsilon,hasBeenCenter)
	
	Clusters = { }
	Noise = set()
	Border = set()
	for i in range(1,k+1):
		SingleCluster = []
		for x in range(len(df)):
			if clusterId[x] == i:
				SingleCluster.append(x)
			elif clusterId[x] == phi:
				Noise.add(x)
		Clusters[i] = SingleCluster
	
	#print(Clusters)


	# find border Point
	mp = [0]*(len(df))
	for c in cores:
		mp[c] = 1
	for n in Noise:
		mp[n] = 1
	for x in range(len(df)):
		if mp[x] == 0:
			Border.add(x)
	#print(cores)

	#print(Clusters)
	print('----------------------------------------\n')
	print("cores:",len(cores))
	print('----------------------------------------\n')
	print("Border: ",len(Border))
	print('----------------------------------------\n')
	print("Noise: ",len(Noise))
	print('----------------------------------------\n')
	return Clusters ,len(cores) , len(Border) , len(Noise)

def fetchData(filename):
	global df
	df = pd.read_csv(filename)

def Main():
	fetchData('Spiral.txt')
	features = df.label.unique()
	i = 0
	labels = {}
	for item in features:
		labels[item] = i
		i += 1
	print(labels)

	epList = [0.8,1.9,3.0]
	minPoints = [4,6,8]
	
	# iris data (for iris Data Uncomment this)
	"""epList = [0.2,0.39,0.7]
	minPoints = [4,6,8]"""
	
	# Spiral Data (for Spiral Data Uncomment this)
	"""
	epList = [0.8,1.9,3.0]
	minPoints = [4,6,8]
	"""

	iter = 1
	clusters = []
	no_cores = []
	no_borders = []
	no_noise = []
	no_cluster = []
	times = []
	mis_classifications = []
	inputValues = []

	for epsilon in epList:
		for minPoint in minPoints:
			start_time = time.time()
			clusters, cores, border, noise = DB_Scan(epsilon,minPoint)
			mis_classification = findCategories(clusters,labels)
			end_time = time.time()
			no_cores.append(cores)
			no_borders.append(border)
			no_noise.append(noise)
			no_cluster.append(len(clusters))
			mis_classifications.append(mis_classification)
			times.append(end_time-start_time)
			inputValues.append("e:("+ str(epsilon)+")," + "m:("+str(minPoint)+")")
			print(epsilon,minPoint,mis_classification)

	d = {
			'Epsilon,MinPoint': inputValues, 
			 'Clusters': no_cluster,
			 'Core': no_cores,
			 'Border': no_borders,
			 'Noise':no_noise,
			 'RunTime': times,
			 'MisClassfication':mis_classifications
			 }
	df2 = pd.DataFrame(data = d)
	print(df2)
	df2.to_csv ('result_DBScan.csv', index = False, header=True)
if __name__ == "__main__":
    Main()

